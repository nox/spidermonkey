From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ricky Stewart <rstewart@mozilla.com>
Date: Wed, 26 Feb 2020 16:43:17 +0000
Subject: [PATCH] Bug 1616920 - mozbuild/frontend/sandbox.py supports Python 3
 r=firefox-build-system-reviewers,mshal

Differential Revision: https://phabricator.services.mozilla.com/D63538

--HG--
extra : moz-landing-system : lando

diff --git a/python/mozbuild/mozbuild/frontend/reader.py b/python/mozbuild/mozbuild/frontend/reader.py
index af13b33df21f..87fbd0049520 100644
--- a/python/mozbuild/mozbuild/frontend/reader.py
+++ b/python/mozbuild/mozbuild/frontend/reader.py
@@ -35,6 +35,7 @@ from collections import (
 from io import StringIO
 from itertools import chain
 from multiprocessing import cpu_count
+import six
 from six import string_types
 
 from mozbuild.util import (
@@ -81,11 +82,9 @@ from mozbuild.base import ExecutionSummary
 from concurrent.futures.process import ProcessPoolExecutor
 
 
-if sys.version_info.major == 2:
-    text_type = unicode
+if six.PY2:
     type_type = types.TypeType
 else:
-    text_type = str
     type_type = type
 
 
@@ -287,7 +286,7 @@ class MozbuildSandbox(Sandbox):
             raise Exception('`template` is a function decorator. You must '
                             'use it as `@template` preceding a function declaration.')
 
-        name = func.func_name
+        name = func.__name__
 
         if name in self.templates:
             raise KeyError(
@@ -384,10 +383,10 @@ class MozbuildSandbox(Sandbox):
 
 class TemplateFunction(object):
     def __init__(self, func, sandbox):
-        self.path = func.func_code.co_filename
-        self.name = func.func_name
+        self.path = func.__code__.co_filename
+        self.name = func.__name__
 
-        code = func.func_code
+        code = func.__code__
         firstlineno = code.co_firstlineno
         lines = sandbox._current_source.splitlines(True)
         if lines:
@@ -411,13 +410,14 @@ class TemplateFunction(object):
         # When using a custom dictionary for function globals/locals, Cpython
         # actually never calls __getitem__ and __setitem__, so we need to
         # modify the AST so that accesses to globals are properly directed
-        # to a dict.
-        self._global_name = b'_data'  # AST wants str for this, not unicode
+        # to a dict. AST wants binary_type for this in Py2 and text_type for
+        # this in Py3, so cast to str.
+        self._global_name = str('_data')
         # In case '_data' is a name used for a variable in the function code,
         # prepend more underscores until we find an unused name.
         while (self._global_name in code.co_names or
                 self._global_name in code.co_varnames):
-            self._global_name += '_'
+            self._global_name += str('_')
         func_ast = self.RewriteName(sandbox, self._global_name).visit(func_ast)
 
         # Execute the rewritten code. That code now looks like:
@@ -431,8 +431,8 @@ class TemplateFunction(object):
             compile(func_ast, self.path, 'exec'),
             glob,
             self.name,
-            func.func_defaults,
-            func.func_closure,
+            func.__defaults__,
+            func.__closure__,
         )
         func()
 
@@ -446,11 +446,11 @@ class TemplateFunction(object):
             '__builtins__': sandbox._builtins
         }
         func = types.FunctionType(
-            self._func.func_code,
+            self._func.__code__,
             glob,
             self.name,
-            self._func.func_defaults,
-            self._func.func_closure
+            self._func.__defaults__,
+            self._func.__closure__,
         )
         sandbox.exec_function(func, args, kwargs, self.path,
                               becomes_current_path=False)
@@ -465,9 +465,7 @@ class TemplateFunction(object):
             self._global_name = global_name
 
         def visit_Str(self, node):
-            # String nodes we got from the AST parser are str, but we want
-            # unicode literals everywhere, so transform them.
-            node.s = unicode(node.s)
+            node.s = six.ensure_text(node.s)
             return node
 
         def visit_Name(self, node):
@@ -602,7 +600,7 @@ class BuildReaderError(Exception):
 
             for l in traceback.format_exception(type(self.other), self.other,
                                                 self.trace):
-                s.write(unicode(l))
+                s.write(six.ensure_text(l))
 
         return s.getvalue()
 
diff --git a/python/mozbuild/mozbuild/frontend/sandbox.py b/python/mozbuild/mozbuild/frontend/sandbox.py
index 18367b4eb003..007e1e3abc6a 100644
--- a/python/mozbuild/mozbuild/frontend/sandbox.py
+++ b/python/mozbuild/mozbuild/frontend/sandbox.py
@@ -20,6 +20,7 @@ user-friendly error messages in the case of errors.
 from __future__ import absolute_import, print_function, unicode_literals
 
 import os
+import six
 import sys
 import weakref
 
@@ -154,7 +155,7 @@ class Sandbox(dict):
         assert os.path.isabs(path)
 
         try:
-            source = self._finder.get(path).read()
+            source = six.ensure_text(self._finder.get(path).read())
         except Exception:
             raise SandboxLoadError(self._context.source_stack,
                                    sys.exc_info()[2], read_error=path)
@@ -300,9 +301,6 @@ class Sandbox(dict):
     def get(self, key, default=None):
         raise NotImplementedError('Not supported')
 
-    def __len__(self):
-        raise NotImplementedError('Not supported')
-
     def __iter__(self):
         raise NotImplementedError('Not supported')
 
diff --git a/python/mozbuild/mozbuild/test/frontend/test_sandbox.py b/python/mozbuild/mozbuild/test/frontend/test_sandbox.py
index 93e499daf45b..0d78eb6bb580 100644
--- a/python/mozbuild/mozbuild/test/frontend/test_sandbox.py
+++ b/python/mozbuild/mozbuild/test/frontend/test_sandbox.py
@@ -111,7 +111,7 @@ class TestSandbox(unittest.TestCase):
         sandbox = self.sandbox()
 
         with self.assertRaises(SandboxExecutionError) as se:
-            sandbox.exec_source('True = 1')
+            sandbox.exec_source('sorted = 1')
 
         e = se.exception
         self.assertIsInstance(e.exc_value, KeyError)
@@ -322,8 +322,8 @@ class TestMozbuildSandbox(unittest.TestCase):
         with self.assertRaises(SandboxCalledError) as sce:
             sandbox.exec_source('error("This is an error.")')
 
-        e = sce.exception
-        self.assertEqual(e.message, 'This is an error.')
+        e = sce.exception.message
+        self.assertIn('This is an error.', str(e))
 
     def test_substitute_config_files(self):
         sandbox = self.sandbox()
@@ -458,8 +458,8 @@ def foo():
         self.assertIsInstance(e.exc_value, NameError)
 
         e = se.exception.exc_value
-        self.assertEqual(e.message,
-                         'Template function names must be CamelCase.')
+        self.assertIn('Template function names must be CamelCase.',
+                      str(e))
 
         # Template names must not already be registered.
         sandbox2 = self.sandbox(metadata={'templates': sandbox.templates})
@@ -475,9 +475,8 @@ def Template():
         self.assertIsInstance(e.exc_value, KeyError)
 
         e = se.exception.exc_value
-        self.assertEqual(e.message,
-                         'A template named "Template" was already declared in %s.' %
-                         sandbox.normalize_path('templates.mozbuild'))
+        self.assertIn('A template named "Template" was already declared in %s.' %
+                      sandbox.normalize_path('templates.mozbuild'), str(e))
 
     def test_function_args(self):
         class Foo(int):
diff --git a/python/mozbuild/mozbuild/test/python.ini b/python/mozbuild/mozbuild/test/python.ini
index 562ef32e789e..f0bf6d391179 100644
--- a/python/mozbuild/mozbuild/test/python.ini
+++ b/python/mozbuild/mozbuild/test/python.ini
@@ -14,6 +14,7 @@ subsuite = mozbuild
 [controller/test_clobber.py]
 [frontend/test_context.py]
 [frontend/test_namespaces.py]
+[frontend/test_sandbox.py]
 [test_artifact_cache.py]
 [test_base.py]
 [test_containers.py]
diff --git a/python/mozbuild/mozbuild/test/python2.ini b/python/mozbuild/mozbuild/test/python2.ini
index 07fe58f76b7a..0846b93adfe3 100644
--- a/python/mozbuild/mozbuild/test/python2.ini
+++ b/python/mozbuild/mozbuild/test/python2.ini
@@ -22,4 +22,3 @@ skip-if = (os == "win")
 [configure/test_lint.py]
 [frontend/test_emitter.py]
 [frontend/test_reader.py]
-[frontend/test_sandbox.py]
