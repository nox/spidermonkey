From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ricky Stewart <rstewart@mozilla.com>
Date: Mon, 2 Mar 2020 21:33:48 +0000
Subject: [PATCH] Bug 1619408 - Make remaining tweaks to build system code to
 allow running `./mach build` with Python 3
 r=firefox-build-system-reviewers,mshal

Differential Revision: https://phabricator.services.mozilla.com/D65017

--HG--
extra : moz-landing-system : lando

diff --git a/build/moz.build b/build/moz.build
index fe8ec385a9c8..1d174e3d3491 100644
--- a/build/moz.build
+++ b/build/moz.build
@@ -89,7 +89,7 @@ if CONFIG['MOZ_APP_BASENAME']:
         inputs=['application.ini.in'],
         py2=True,
         flags=['-D%s=%s' % (k, '1' if v is True else v)
-               for k, v in appini_defines.iteritems()])
+               for k, v in appini_defines.items()])
     
     FINAL_TARGET_FILES += ['!application.ini']
     if CONFIG['MOZ_WIDGET_TOOLKIT'] != 'android' and CONFIG['MOZ_UPDATER']:
diff --git a/python/mozbuild/dumbmake/dumbmake.py b/python/mozbuild/dumbmake/dumbmake.py
index 5457c8b0a0bc..6c2dd76ff0ac 100644
--- a/python/mozbuild/dumbmake/dumbmake.py
+++ b/python/mozbuild/dumbmake/dumbmake.py
@@ -2,12 +2,13 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-from __future__ import absolute_import, unicode_literals
+from __future__ import absolute_import, print_function, unicode_literals
 
 from collections import OrderedDict
 from itertools import groupby
 from operator import itemgetter
 from os.path import dirname
+import six
 
 WHITESPACE_CHARACTERS = ' \t'
 
@@ -36,7 +37,7 @@ def dependency_map(lines):
     deps = {}
 
     for i, (indent, target) in enumerate(pairs):
-        if not deps.has_key(target):
+        if target not in deps:
             deps[target] = []
 
         for j in range(i+1, len(pairs)):
@@ -114,7 +115,7 @@ def add_extra_dependencies(target_pairs, dependency_map):
                 make_dirs[make_dir] = True
 
     all_components = []
-    for make_dir in make_dirs.iterkeys():
+    for make_dir in six.iterkeys(make_dirs):
         all_components.extend(get_components(make_dir))
 
     for i in all_dependencies(*all_components, dependency_map=dependency_map):
diff --git a/python/mozbuild/mozbuild/base.py b/python/mozbuild/mozbuild/base.py
index 144de0f98574..18e528eb96c3 100644
--- a/python/mozbuild/mozbuild/base.py
+++ b/python/mozbuild/mozbuild/base.py
@@ -724,7 +724,7 @@ class MozbuildObject(ProcessExecutionMixin):
             fn = self._run_command_in_srcdir
 
         append_env = dict(append_env or ())
-        append_env[b'MACH'] = '1'
+        append_env['MACH'] = '1'
 
         params = {
             'args': args,
diff --git a/python/mozbuild/mozbuild/compilation/warnings.py b/python/mozbuild/mozbuild/compilation/warnings.py
index fa786deef5c5..2d149df4ecc6 100644
--- a/python/mozbuild/mozbuild/compilation/warnings.py
+++ b/python/mozbuild/mozbuild/compilation/warnings.py
@@ -280,7 +280,7 @@ class WarningsDatabase(object):
 
     def load_from_file(self, filename):
         """Load the database from a file."""
-        with open(filename, 'rb') as fh:
+        with open(filename, 'r') as fh:
             self.deserialize(fh)
 
     def save_to_file(self, filename):
@@ -291,7 +291,7 @@ class WarningsDatabase(object):
         except OSError as e:
             if e.errno != errno.EEXIST:
                 raise
-        with open(filename, 'wb') as fh:
+        with open(filename, 'w') as fh:
             self.serialize(fh)
 
 
diff --git a/python/mozbuild/mozbuild/controller/building.py b/python/mozbuild/mozbuild/controller/building.py
index 6a8abedefba0..108c60ba62e5 100644
--- a/python/mozbuild/mozbuild/controller/building.py
+++ b/python/mozbuild/mozbuild/controller/building.py
@@ -605,7 +605,7 @@ class BuildProgressFooter(Footer):
 
     def __init__(self, terminal, monitor):
         Footer.__init__(self, terminal)
-        self.tiers = monitor.tiers.tier_status.viewitems()
+        self.tiers = six.viewitems(monitor.tiers.tier_status)
 
     def draw(self):
         """Draws this footer in the terminal."""
@@ -1165,7 +1165,7 @@ class BuildDriver(MozbuildObject):
                     # tree builds because they aren't reliable there. This
                     # could potentially be fixed if the build monitor were more
                     # intelligent about encountering undefined state.
-                    no_build_status = b'1' if make_dir is not None else b''
+                    no_build_status = '1' if make_dir is not None else ''
                     tgt_env = dict(append_env or {})
                     tgt_env['NO_BUILDSTATUS_MESSAGES'] = no_build_status
                     status = self._run_make(
@@ -1366,7 +1366,7 @@ class BuildDriver(MozbuildObject):
         # Only print build status messages when we have an active
         # monitor.
         if not buildstatus_messages:
-            append_env['NO_BUILDSTATUS_MESSAGES'] = b'1'
+            append_env['NO_BUILDSTATUS_MESSAGES'] = '1'
         status = self._run_client_mk(target='configure',
                                      line_handler=line_handler,
                                      append_env=append_env)
@@ -1458,16 +1458,16 @@ class BuildDriver(MozbuildObject):
             mozconfig_make_lines.append(arg)
 
         if mozconfig['make_flags']:
-            mozconfig_make_lines.append(b'MOZ_MAKE_FLAGS=%s' %
-                                        b' '.join(mozconfig['make_flags']))
+            mozconfig_make_lines.append('MOZ_MAKE_FLAGS=%s' %
+                                        ' '.join(mozconfig['make_flags']))
         objdir = mozpath.normsep(self.topobjdir)
-        mozconfig_make_lines.append(b'MOZ_OBJDIR=%s' % objdir)
-        mozconfig_make_lines.append(b'OBJDIR=%s' % objdir)
+        mozconfig_make_lines.append('MOZ_OBJDIR=%s' % objdir)
+        mozconfig_make_lines.append('OBJDIR=%s' % objdir)
 
         if mozconfig['path']:
-            mozconfig_make_lines.append(b'FOUND_MOZCONFIG=%s' %
+            mozconfig_make_lines.append('FOUND_MOZCONFIG=%s' %
                                         mozpath.normsep(mozconfig['path']))
-            mozconfig_make_lines.append(b'export FOUND_MOZCONFIG')
+            mozconfig_make_lines.append('export FOUND_MOZCONFIG')
 
         # The .mozconfig.mk file only contains exported variables and lines with
         # UPLOAD_EXTRA_FILES.
@@ -1475,22 +1475,22 @@ class BuildDriver(MozbuildObject):
             line for line in mozconfig_make_lines
             # Bug 1418122 investigate why UPLOAD_EXTRA_FILES is special and
             # remove it.
-            if line.startswith(b'export ') or b'UPLOAD_EXTRA_FILES' in line
+            if line.startswith('export ') or 'UPLOAD_EXTRA_FILES' in line
         ]
 
         mozconfig_client_mk = os.path.join(self.topobjdir,
                                            '.mozconfig-client-mk')
         with FileAvoidWrite(mozconfig_client_mk) as fh:
-            fh.write(b'\n'.join(mozconfig_make_lines))
+            fh.write('\n'.join(mozconfig_make_lines))
 
         mozconfig_mk = os.path.join(self.topobjdir, '.mozconfig.mk')
         with FileAvoidWrite(mozconfig_mk) as fh:
-            fh.write(b'\n'.join(mozconfig_filtered_lines))
+            fh.write('\n'.join(mozconfig_filtered_lines))
 
         # Copy the original mozconfig to the objdir.
         mozconfig_objdir = os.path.join(self.topobjdir, '.mozconfig')
         if mozconfig['path']:
-            with open(mozconfig['path'], 'rb') as ifh:
+            with open(mozconfig['path'], 'r') as ifh:
                 with FileAvoidWrite(mozconfig_objdir) as ofh:
                     ofh.write(ifh.read())
         else:
diff --git a/python/mozbuild/mozbuild/frontend/gyp_reader.py b/python/mozbuild/mozbuild/frontend/gyp_reader.py
index f17ade94ad54..95fcb2f5d844 100644
--- a/python/mozbuild/mozbuild/frontend/gyp_reader.py
+++ b/python/mozbuild/mozbuild/frontend/gyp_reader.py
@@ -6,10 +6,10 @@ from __future__ import absolute_import, print_function, unicode_literals
 
 import gyp
 import gyp.msvs_emulation
+import six
 import sys
 import os
 import time
-import types
 
 import mozpack.path as mozpath
 from mozpack.files import FileFinder
@@ -41,19 +41,13 @@ chrome_src = mozpath.abspath(mozpath.join(mozpath.dirname(gyp.__file__),
 script_dir = mozpath.join(chrome_src, 'build')
 
 
-def encode(value):
-    if isinstance(value, unicode):
-        return value.encode('utf-8')
-    return value
-
-
 # Default variables gyp uses when evaluating gyp files.
 generator_default_variables = {
 }
-for dirname in [b'INTERMEDIATE_DIR', b'SHARED_INTERMEDIATE_DIR', b'PRODUCT_DIR',
-                b'LIB_DIR', b'SHARED_LIB_DIR']:
+for dirname in ['INTERMEDIATE_DIR', 'SHARED_INTERMEDIATE_DIR', 'PRODUCT_DIR',
+                'LIB_DIR', 'SHARED_LIB_DIR']:
     # Some gyp steps fail if these are empty(!).
-    generator_default_variables[dirname] = b'$' + dirname
+    generator_default_variables[dirname] = '$' + dirname
 
 for unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',
                'RULE_INPUT_DIRNAME', 'RULE_INPUT_EXT',
@@ -61,7 +55,7 @@ for unused in ['RULE_INPUT_PATH', 'RULE_INPUT_ROOT', 'RULE_INPUT_NAME',
                'STATIC_LIB_PREFIX', 'STATIC_LIB_SUFFIX',
                'SHARED_LIB_PREFIX', 'SHARED_LIB_SUFFIX',
                'LINKER_SUPPORTS_ICF']:
-    generator_default_variables[unused] = b''
+    generator_default_variables[unused] = ''
 
 
 class GypContext(TemplateContext):
@@ -126,7 +120,7 @@ def process_gyp_result(gyp_result, gyp_dir_attrs, path, config, output,
     # Process all targets from the given gyp files and its dependencies.
     # The path given to AllTargets needs to use os.sep, while the frontend code
     # gives us paths normalized with forward slash separator.
-    for target in gyp.common.AllTargets(flat_list, targets, path.replace(b'/', os.sep)):
+    for target in gyp.common.AllTargets(flat_list, targets, path.replace('/', os.sep)):
         build_file, target_name, toolset = gyp.common.ParseQualifiedTarget(target)
 
         # Each target is given its own objdir. The base of that objdir
@@ -206,14 +200,13 @@ def process_gyp_result(gyp_result, gyp_dir_attrs, path, config, output,
         elif spec['type'] in ('static_library', 'shared_library', 'executable'):
             # Remove leading 'lib' from the target_name if any, and use as
             # library name.
-            name = spec['target_name']
+            name = six.ensure_text(spec['target_name'])
             if spec['type'] in ('static_library', 'shared_library'):
                 if name.startswith('lib'):
                     name = name[3:]
-                # The context expects an unicode string.
-                context['LIBRARY_NAME'] = name.decode('utf-8')
+                context['LIBRARY_NAME'] = name
             else:
-                context['PROGRAM'] = name.decode('utf-8')
+                context['PROGRAM'] = name
             if spec['type'] == 'shared_library':
                 context['FORCE_SHARED_LIB'] = True
             elif spec['type'] == 'static_library' and \
@@ -325,7 +318,7 @@ def process_gyp_result(gyp_result, gyp_dir_attrs, path, config, output,
                         if not f:
                             continue
                         # the result may be a string or a list.
-                        if isinstance(f, types.StringTypes):
+                        if isinstance(f, six.string_types):
                             context[var].append(f)
                         else:
                             context[var].extend(f)
@@ -393,7 +386,6 @@ class GypProcessor(object):
 
         # gyp expects plain str instead of unicode. The frontend code gives us
         # unicode strings, so convert them.
-        path = encode(path)
         if config.substs['CC_TYPE'] == 'clang-cl':
             # This isn't actually used anywhere in this generator, but it's needed
             # to override the registry detection of VC++ in gyp.
@@ -403,10 +395,10 @@ class GypProcessor(object):
             }))
 
         params = {
-            b'parallel': False,
-            b'generator_flags': {},
-            b'build_files': [path],
-            b'root_targets': None,
+            'parallel': False,
+            'generator_flags': {},
+            'build_files': [path],
+            'root_targets': None,
         }
 
         if gyp_dir_attrs.no_chromium:
@@ -415,17 +407,16 @@ class GypProcessor(object):
         else:
             depth = chrome_src
             # Files that gyp_chromium always includes
-            includes = [encode(mozpath.join(script_dir, 'gyp_includes',
-                                            'common.gypi'))]
+            includes = [mozpath.join(script_dir, 'gyp_includes',
+                                     'common.gypi')]
             finder = FileFinder(chrome_src)
-            includes.extend(encode(mozpath.join(chrome_src, name))
+            includes.extend(mozpath.join(chrome_src, name)
                             for name, _ in finder.find('*/supplement.gypi'))
 
-        str_vars = dict((name, encode(value)) for name, value in
-                        gyp_dir_attrs.variables.items())
-        self._gyp_loader_future = executor.submit(load_gyp, [path], b'mozbuild',
+        str_vars = dict(gyp_dir_attrs.variables)
+        self._gyp_loader_future = executor.submit(load_gyp, [path], 'mozbuild',
                                                   str_vars, includes,
-                                                  encode(depth), params)
+                                                  depth, params)
 
     @property
     def results(self):
diff --git a/python/mozbuild/mozbuild/frontend/reader.py b/python/mozbuild/mozbuild/frontend/reader.py
index 41279216dc29..3ab72ae0369d 100644
--- a/python/mozbuild/mozbuild/frontend/reader.py
+++ b/python/mozbuild/mozbuild/frontend/reader.py
@@ -1151,7 +1151,7 @@ class BuildReader(object):
                                                  context)
                 non_unified_sources.add(source)
             action_overrides = {}
-            for action, script in gyp_dir.action_overrides.iteritems():
+            for action, script in six.iteritems(gyp_dir.action_overrides):
                 action_overrides[action] = SourcePath(context, script)
 
             gyp_processor = GypProcessor(context.config,
