From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Anthony Ramine <nox@nox.paris>
Date: Tue, 7 Jan 2020 12:47:41 +0100
Subject: [PATCH] Introduce --enable-uwp


diff --git a/config/external/icu/common/moz.build b/config/external/icu/common/moz.build
index 61ff5dc72e38..9dfbf9cb7600 100644
--- a/config/external/icu/common/moz.build
+++ b/config/external/icu/common/moz.build
@@ -8,6 +8,8 @@ Library('icuuc')
 FINAL_LIBRARY = 'icu'
 
 DEFINES['U_COMMON_IMPLEMENTATION'] = True
+if CONFIG['JS_ENABLE_UWP']:
+    DEFINES['U_PLATFORM_HAS_WINUWP_API'] = 1
 
 LOCAL_INCLUDES += ['/intl/icu/source/i18n']
 
diff --git a/js/moz.configure b/js/moz.configure
index 209f77406163..dceeef4e15b2 100644
--- a/js/moz.configure
+++ b/js/moz.configure
@@ -48,6 +48,19 @@ set_define('JS_PUNBOX64', depends(target)(lambda t: t.bitness == 64 or None))
 set_define('JS_NUNBOX32', depends(target)(lambda t: t.bitness == 32 or None))
 
 
+js_option('--enable-uwp',
+          default=False,
+          help='{Enable|Disable} building for UWP environments')
+
+@depends('--enable-uwp')
+def js_enable_uwp(value):
+    if value:
+        return True
+
+set_config('JS_ENABLE_UWP', js_enable_uwp)
+set_define('JS_ENABLE_UWP', js_enable_uwp)
+
+
 # SpiderMonkey as a shared library, and how its symbols are exported
 # ==================================================================
 js_option('--disable-shared-js', when=js_standalone,
diff --git a/js/src/builtin/Profilers.cpp b/js/src/builtin/Profilers.cpp
index 53da01dba94a..171c821d174a 100644
--- a/js/src/builtin/Profilers.cpp
+++ b/js/src/builtin/Profilers.cpp
@@ -24,8 +24,13 @@
 #endif
 
 #ifdef XP_WIN
-#  include <process.h>
-#  define getpid _getpid
+#  ifndef JS_ENABLE_UWP
+#    include <process.h>
+#    define getpid _getpid
+#  else
+#    include <processthreadsapi.h>
+#    define getpid GetCurrentProcessId
+#  endif
 #endif
 
 #include "js/CharacterEncoding.h"
diff --git a/js/src/builtin/TestingFunctions.cpp b/js/src/builtin/TestingFunctions.cpp
index dc6dd70a6daa..ab1df9bc9daa 100644
--- a/js/src/builtin/TestingFunctions.cpp
+++ b/js/src/builtin/TestingFunctions.cpp
@@ -5392,7 +5392,9 @@ static bool GetTimeZone(JSContext* cx, unsigned argc, Value* vp) {
   auto getTimeZone = [](std::time_t* now) -> const char* {
     std::tm local{};
 #if defined(_WIN32)
+#ifndef JS_ENABLE_UWP
     _tzset();
+#endif
     if (localtime_s(&local, now) == 0) {
       return _tzname[local.tm_isdst > 0];
     }
@@ -5487,7 +5489,9 @@ static bool SetTimeZone(JSContext* cx, unsigned argc, Value* vp) {
   }
 
 #if defined(_WIN32)
+#ifndef JS_ENABLE_UWP
   _tzset();
+#endif
 #else
   tzset();
 #endif /* _WIN32 */
diff --git a/js/src/ds/MemoryProtectionExceptionHandler.cpp b/js/src/ds/MemoryProtectionExceptionHandler.cpp
index ad272a270d84..f84800a830a8 100644
--- a/js/src/ds/MemoryProtectionExceptionHandler.cpp
+++ b/js/src/ds/MemoryProtectionExceptionHandler.cpp
@@ -111,7 +111,7 @@ static bool sExceptionHandlerInstalled = false;
 static ProtectedRegionTree sProtectedRegions;
 
 bool MemoryProtectionExceptionHandler::isDisabled() {
-#if defined(XP_WIN) && defined(MOZ_ASAN)
+#if defined(XP_WIN) && (defined(MOZ_ASAN) || defined(JS_ENABLE_UWP))
   // Under Windows ASan, WasmFaultHandler registers itself at 'last' priority
   // in order to let ASan's ShadowExceptionHandler stay at 'first' priority.
   // Unfortunately that results in spurious wasm faults passing through the
@@ -176,6 +176,7 @@ static mozilla::Atomic<bool> sHandlingException(false);
 
 static long __stdcall VectoredExceptionHandler(
     EXCEPTION_POINTERS* ExceptionInfo) {
+#ifndef JS_ENABLE_UWP
   EXCEPTION_RECORD* ExceptionRecord = ExceptionInfo->ExceptionRecord;
 
   // We only handle one kind of exception; ignore all others.
@@ -200,6 +201,7 @@ static long __stdcall VectoredExceptionHandler(
       }
     }
   }
+#endif
 
   // Forward to the previous handler which may be a debugger,
   // the crash reporter or something else entirely.
@@ -213,11 +215,11 @@ bool MemoryProtectionExceptionHandler::install() {
   if (MemoryProtectionExceptionHandler::isDisabled()) {
     return true;
   }
-
+#ifndef JS_ENABLE_UWP
   // Install our new exception handler.
   sVectoredExceptionHandler = AddVectoredExceptionHandler(
       /* FirstHandler = */ true, VectoredExceptionHandler);
-
+#endif
   sExceptionHandlerInstalled = sVectoredExceptionHandler != nullptr;
   return sExceptionHandlerInstalled;
 }
@@ -225,9 +227,10 @@ bool MemoryProtectionExceptionHandler::install() {
 void MemoryProtectionExceptionHandler::uninstall() {
   if (sExceptionHandlerInstalled) {
     MOZ_ASSERT(!sHandlingException);
-
+#ifndef JS_ENABLE_UWP
     // Restore the previous exception handler.
     MOZ_ALWAYS_TRUE(RemoveVectoredExceptionHandler(sVectoredExceptionHandler));
+#endif
 
     sExceptionHandlerInstalled = false;
   }
diff --git a/js/src/gc/Memory.cpp b/js/src/gc/Memory.cpp
index da1c3beab4d4..89f504741e81 100644
--- a/js/src/gc/Memory.cpp
+++ b/js/src/gc/Memory.cpp
@@ -895,9 +895,15 @@ void* AllocateMappedContent(int fd, size_t offset, size_t length,
     }
     UnmapInternal(reinterpret_cast<void*>(region), mappedLength);
     // If the offset or length are out of bounds, this call will fail.
+#ifdef JS_ENABLE_UWP
+    map = static_cast<uint8_t*>(
+        MapViewOfFileFromApp(hMap, FILE_MAP_COPY, ((ULONG64)offsetH << 32) | offsetL,
+                             alignedLength));
+#else
     map = static_cast<uint8_t*>(
         MapViewOfFileEx(hMap, FILE_MAP_COPY, offsetH, offsetL, alignedLength,
                         reinterpret_cast<void*>(region)));
+#endif
 
     // Retry if another thread mapped the address we were trying to use.
     if (map || GetLastError() != ERROR_INVALID_ADDRESS) {
diff --git a/js/src/jit/CacheIRSpewer.cpp b/js/src/jit/CacheIRSpewer.cpp
index ce3f9368fc0c..6316bd17388b 100644
--- a/js/src/jit/CacheIRSpewer.cpp
+++ b/js/src/jit/CacheIRSpewer.cpp
@@ -11,8 +11,13 @@
 #  include "mozilla/Sprintf.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifndef JS_ENABLE_UWP
+#      include <process.h>
+#      define getpid _getpid
+#    else
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/jit/JitSpewer.cpp b/js/src/jit/JitSpewer.cpp
index b80270d9eb70..48eb1f389a58 100644
--- a/js/src/jit/JitSpewer.cpp
+++ b/js/src/jit/JitSpewer.cpp
@@ -12,8 +12,13 @@
 #  include "mozilla/Sprintf.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifndef JS_ENABLE_UWP
+#      include <process.h>
+#      define getpid _getpid
+#    else
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/jit/ProcessExecutableMemory.cpp b/js/src/jit/ProcessExecutableMemory.cpp
index 7b06851694c3..0e65aeb23500 100644
--- a/js/src/jit/ProcessExecutableMemory.cpp
+++ b/js/src/jit/ProcessExecutableMemory.cpp
@@ -145,6 +145,7 @@ PRUNTIME_FUNCTION RuntimeFunctionCallback(DWORD64 ControlPc, PVOID Context);
 // For an explanation of the problem being solved here, see
 // SetJitExceptionFilter in jsfriendapi.h.
 static bool RegisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
+#ifndef JS_ENABLE_UWP
   if (!VirtualAlloc(p, pageSize, MEM_COMMIT, PAGE_READWRITE)) {
     MOZ_CRASH();
   }
@@ -232,6 +233,9 @@ static bool RegisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
   AutoSuppressStackWalking suppress;
   return RtlInstallFunctionTableCallback((DWORD64)p | 0x3, (DWORD64)p, bytes,
                                          RuntimeFunctionCallback, NULL, NULL);
+#else
+  return false;
+#endif
 }
 
 static void UnregisterExecutableMemory(void* p, size_t bytes, size_t pageSize) {
@@ -251,7 +255,11 @@ static void* ReserveProcessExecutableMemory(size_t bytes) {
   void* p = nullptr;
   for (size_t i = 0; i < 10; i++) {
     void* randomAddr = ComputeRandomAllocationAddress();
+#ifdef JS_ENABLE_UWP
+    p = VirtualAllocFromApp(randomAddr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#else
     p = VirtualAlloc(randomAddr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#endif
     if (p) {
       break;
     }
@@ -259,7 +267,11 @@ static void* ReserveProcessExecutableMemory(size_t bytes) {
 
   if (!p) {
     // Try again without randomization.
+#ifdef JS_ENABLE_UWP
+    p = VirtualAllocFromApp(nullptr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#else
     p = VirtualAlloc(nullptr, bytes, MEM_RESERVE, PAGE_NOACCESS);
+#endif
     if (!p) {
       return nullptr;
     }
@@ -310,8 +322,17 @@ static DWORD ProtectionSettingToFlags(ProtectionSetting protection) {
 
 static MOZ_MUST_USE bool CommitPages(void* addr, size_t bytes,
                                      ProtectionSetting protection) {
+#ifdef JS_ENABLE_UWP
+  void* p = VirtualAllocFromApp(addr, bytes, MEM_COMMIT, PAGE_READWRITE);
+  if (p) {
+    ULONG oldProt;
+    bool r = VirtualProtectFromApp(addr, bytes, ProtectionSettingToFlags(protection), &oldProt);
+    MOZ_RELEASE_ASSERT(r);
+  }
+#else
   void* p = VirtualAlloc(addr, bytes, MEM_COMMIT,
                          ProtectionSettingToFlags(protection));
+#endif
   if (!p) {
     return false;
   }
@@ -768,7 +789,11 @@ bool js::jit::ReprotectRegion(void* start, size_t size,
 #ifdef XP_WIN
   DWORD oldProtect;
   DWORD flags = ProtectionSettingToFlags(protection);
+#ifndef JS_ENABLE_UWP
   if (!VirtualProtect(pageStart, size, flags, &oldProtect)) {
+#else
+  if (!VirtualProtectFromApp(pageStart, size, flags, &oldProtect)) {
+#endif
     return false;
   }
 #else
diff --git a/js/src/js-config.h.in b/js/src/js-config.h.in
index 6276e0c7decc..6c252cb0223d 100644
--- a/js/src/js-config.h.in
+++ b/js/src/js-config.h.in
@@ -61,6 +61,9 @@
 /* Define to 1 if SpiderMonkey is in PUNBOX64 mode. */
 #undef JS_PUNBOX64
 
+/* Define to 1 if SpiderMonkey is built in a UWP environment. */
+#undef JS_ENABLE_UWP
+
 /* MOZILLA JSAPI version number components */
 #undef MOZJS_MAJOR_VERSION
 #undef MOZJS_MINOR_VERSION
diff --git a/js/src/old-configure.in b/js/src/old-configure.in
index a67466b5023d..84d0b3080e7e 100644
--- a/js/src/old-configure.in
+++ b/js/src/old-configure.in
@@ -113,8 +113,8 @@ MOZ_TOOL_VARIABLES
 dnl Special win32 checks
 dnl ========================================================
 
-# Target the Windows 8.1 SDK by default
-WINVER=601
+# Target the Windows 10 SDK by default
+WINVER=A00
 
 case "$target" in
 *-mingw*)
diff --git a/js/src/util/StructuredSpewer.h b/js/src/util/StructuredSpewer.h
index b4c2c1892dd2..430a8d30bb4d 100644
--- a/js/src/util/StructuredSpewer.h
+++ b/js/src/util/StructuredSpewer.h
@@ -21,8 +21,13 @@
 #  include "vm/Printer.h"
 
 #  ifdef XP_WIN
-#    include <process.h>
-#    define getpid _getpid
+#    ifndef JS_ENABLE_UWP
+#      include <process.h>
+#      define getpid _getpid
+#    else
+#      include <processthreadsapi.h>
+#      define getpid GetCurrentProcessId
+#    endif
 #  else
 #    include <unistd.h>
 #  endif
diff --git a/js/src/vm/CodeCoverage.cpp b/js/src/vm/CodeCoverage.cpp
index f93cb54ddab3..03bf484cc462 100644
--- a/js/src/vm/CodeCoverage.cpp
+++ b/js/src/vm/CodeCoverage.cpp
@@ -13,7 +13,13 @@
 #include <utility>
 #ifdef XP_WIN
 #  include <process.h>
-#  define getpid _getpid
+#  ifndef JS_ENABLE_UWP
+#    include <process.h>
+#    define getpid _getpid
+#  else
+#    include <processthreadsapi.h>
+#    define getpid GetCurrentProcessId
+#  endif
 #else
 #  include <unistd.h>
 #endif
diff --git a/js/src/vm/Time.cpp b/js/src/vm/Time.cpp
index 059710064c57..6ffc8e55c5ad 100644
--- a/js/src/vm/Time.cpp
+++ b/js/src/vm/Time.cpp
@@ -21,6 +21,9 @@
 #include "jstypes.h"
 
 #ifdef XP_WIN
+#ifdef JS_ENABLE_UWP
+#  include <windows.h>
+#endif
 #  include <windef.h>
 #  include <winbase.h>
 #  include <crtdbg.h>   /* for _CrtSetReportMode */
@@ -99,13 +102,17 @@ static void NowCalibrate() {
 
   // By wrapping a timeBegin/EndPeriod pair of calls around this loop,
   // the loop seems to take much less time (1 ms vs 15ms) on Vista.
+#ifndef JS_ENABLE_UWP
   timeBeginPeriod(1);
+#endif
   FILETIME ft, ftStart;
   GetSystemTimeAsFileTime(&ftStart);
   do {
     GetSystemTimeAsFileTime(&ft);
   } while (memcmp(&ftStart, &ft, sizeof(ft)) == 0);
+#ifndef JS_ENABLE_UWP
   timeEndPeriod(1);
+#endif
 
   LARGE_INTEGER now;
   QueryPerformanceCounter(&now);
@@ -135,11 +142,15 @@ void PRMJ_NowInit() {
   InitializeCriticalSectionAndSpinCount(&calibration.data_lock,
                                         DataLockSpinCount);
 
+#ifndef JS_ENABLE_UWP
   // Windows 8 has a new API function we can use.
   if (HMODULE h = GetModuleHandle("kernel32.dll")) {
     pGetSystemTimePreciseAsFileTime = (void(WINAPI*)(LPFILETIME))GetProcAddress(
         h, "GetSystemTimePreciseAsFileTime");
   }
+#else
+    pGetSystemTimePreciseAsFileTime = &GetSystemTimeAsFileTime;
+#endif
 }
 
 void PRMJ_NowShutdown() { DeleteCriticalSection(&calibration.data_lock); }
diff --git a/js/src/vm/TraceLoggingGraph.cpp b/js/src/vm/TraceLoggingGraph.cpp
index 73a4c3c8c6a4..69e682d26bd0 100644
--- a/js/src/vm/TraceLoggingGraph.cpp
+++ b/js/src/vm/TraceLoggingGraph.cpp
@@ -7,8 +7,13 @@
 #include "vm/TraceLoggingGraph.h"
 
 #ifdef XP_WIN
-#  include <process.h>
-#  define getpid _getpid
+#  ifndef JS_ENABLE_UWP
+#    include <process.h>
+#    define getpid _getpid
+#  else
+#    include <processthreadsapi.h>
+#    define getpid GetCurrentProcessId
+#  endif
 #else
 #  include <unistd.h>
 #endif
diff --git a/js/src/wasm/WasmSignalHandlers.cpp b/js/src/wasm/WasmSignalHandlers.cpp
index 7daa4371de21..a4cf67b4fe2e 100644
--- a/js/src/wasm/WasmSignalHandlers.cpp
+++ b/js/src/wasm/WasmSignalHandlers.cpp
@@ -743,6 +743,7 @@ static MOZ_MUST_USE bool HandleTrap(CONTEXT* context,
 // Compiled in all user binaries, so should be stable over time.
 static const unsigned sThreadLocalArrayPointerIndex = 11;
 
+#ifndef JS_ENABLE_UWP
 static LONG WINAPI WasmTrapHandler(LPEXCEPTION_POINTERS exception) {
   // Make sure TLS is initialized before reading sAlreadyHandlingTrap.
   if (!NtCurrentTeb()->Reserved1[sThreadLocalArrayPointerIndex]) {
@@ -766,6 +767,7 @@ static LONG WINAPI WasmTrapHandler(LPEXCEPTION_POINTERS exception) {
 
   return EXCEPTION_CONTINUE_EXECUTION;
 }
+#endif
 
 #elif defined(XP_DARWIN)
 // On OSX we are forced to use the lower-level Mach exception mechanism instead
@@ -1025,11 +1027,13 @@ void wasm::EnsureEagerProcessSignalHandlers() {
   // such as MemoryProtectionExceptionHandler that assume we are crashing.
   const bool firstHandler = true;
 #  endif
+#  ifndef JS_ENABLE_UWP
   if (!AddVectoredExceptionHandler(firstHandler, WasmTrapHandler)) {
     // Windows has all sorts of random security knobs for disabling things
     // so make this a dynamic failure that disables wasm, not a MOZ_CRASH().
     return;
   }
+#  endif
 
 #elif defined(XP_DARWIN)
   // All the Mach setup in EnsureLazyProcessSignalHandlers.
diff --git a/mfbt/Poison.cpp b/mfbt/Poison.cpp
index f490856a3155..96928adcc1f5 100644
--- a/mfbt/Poison.cpp
+++ b/mfbt/Poison.cpp
@@ -14,6 +14,9 @@
 #include "mozilla/Assertions.h"
 #ifdef _WIN32
 #  include <windows.h>
+#  ifdef JS_ENABLE_UWP
+#    include <memoryapi.h>
+#  endif
 #elif !defined(__OS2__)
 #  include <unistd.h>
 #  include <sys/mman.h>
@@ -42,7 +45,11 @@ uintptr_t gMozillaPoisonSize;
 
 #ifdef _WIN32
 static void* ReserveRegion(uintptr_t aRegion, uintptr_t aSize) {
+#ifdef JS_ENABLE_UWP
+  return VirtualAllocFromApp((void*)aRegion, aSize, MEM_RESERVE, PAGE_NOACCESS);
+#else
   return VirtualAlloc((void*)aRegion, aSize, MEM_RESERVE, PAGE_NOACCESS);
+#endif
 }
 
 static void ReleaseRegion(void* aRegion, uintptr_t aSize) {
diff --git a/mfbt/RandomNum.cpp b/mfbt/RandomNum.cpp
index c3bb9ecef444..7ea7d127df67 100644
--- a/mfbt/RandomNum.cpp
+++ b/mfbt/RandomNum.cpp
@@ -13,6 +13,7 @@
 
 #if defined(XP_WIN)
 
+#ifndef JS_ENABLE_UWP
 // Microsoft doesn't "officially" support using RtlGenRandom() directly
 // anymore, and the Windows headers assume that __stdcall is
 // the default calling convention (which is true when Microsoft uses this
@@ -24,6 +25,10 @@
 #  define RtlGenRandom SystemFunction036
 extern "C" BOOLEAN NTAPI RtlGenRandom(PVOID RandomBuffer,
                                       ULONG RandomBufferLength);
+#else
+#  include "bcrypt.h"
+#  include "ntstatus.h"
+#endif // JS_ENABLE_UWP
 
 #endif
 
@@ -98,9 +103,15 @@ MFBT_API Maybe<uint64_t> RandomUint64() {
 #if defined(XP_WIN)
 
   uint64_t result = 0;
+#ifdef JS_ENABLE_UWP
+  if (BCryptGenRandom(nullptr, reinterpret_cast<PUCHAR>(&result), sizeof(result), BCRYPT_USE_SYSTEM_PREFERRED_RNG) != STATUS_SUCCESS) {
+    return Nothing();
+  }
+#else
   if (!RtlGenRandom(&result, sizeof(result))) {
     return Nothing();
   }
+#endif
 
   return Some(result);
 
diff --git a/mfbt/WindowsVersion.h b/mfbt/WindowsVersion.h
index 054279f778c8..f641299327c7 100644
--- a/mfbt/WindowsVersion.h
+++ b/mfbt/WindowsVersion.h
@@ -7,6 +7,8 @@
 #ifndef mozilla_WindowsVersion_h
 #define mozilla_WindowsVersion_h
 
+#ifndef JS_ENABLE_UWP
+
 #include "mozilla/Atomics.h"
 #include "mozilla/Attributes.h"
 #include <stdint.h>
@@ -202,4 +204,6 @@ inline bool IsWin7AndPre2000Compatible() {
 
 }  // namespace mozilla
 
+#endif
+
 #endif /* mozilla_WindowsVersion_h */
diff --git a/mozglue/misc/DynamicallyLinkedFunctionPtr.h b/mozglue/misc/DynamicallyLinkedFunctionPtr.h
index 4313974ec5d4..7b6cb42190ab 100644
--- a/mozglue/misc/DynamicallyLinkedFunctionPtr.h
+++ b/mozglue/misc/DynamicallyLinkedFunctionPtr.h
@@ -47,7 +47,11 @@ class DynamicallyLinkedFunctionPtrBase {
 
   DynamicallyLinkedFunctionPtrBase(const wchar_t* aLibName,
                                    const char* aFuncName)
+#ifndef JS_ENABLE_UWP
       : mModule(::LoadLibraryW(aLibName)), mFunction(nullptr) {
+#else
+      : mModule(nullptr), mFunction(nullptr) {
+#endif
     if (!mModule) {
       return;
     }
diff --git a/mozglue/misc/StackWalk.cpp b/mozglue/misc/StackWalk.cpp
index f443baa22013..5ffbfac24fc1 100644
--- a/mozglue/misc/StackWalk.cpp
+++ b/mozglue/misc/StackWalk.cpp
@@ -77,9 +77,11 @@ extern MOZ_EXPORT void* __libc_stack_end;  // from ld-linux.so
 // We need a way to know if we are building for WXP (or later), as if we are, we
 // need to use the newer 64-bit APIs. API_VERSION_NUMBER seems to fit the bill.
 // A value of 9 indicates we want to use the new APIs.
+#ifndef JS_ENABLE_UWP
 #  if API_VERSION_NUMBER < 9
 #    error Too old imagehlp.h
 #  endif
+#endif
 
 struct WalkStackData {
   // Are we walking the stack of the calling thread? Note that we need to avoid
@@ -181,6 +183,9 @@ static void InitializeDbgHelpCriticalSection() {
 }
 
 static void WalkStackMain64(struct WalkStackData* aData) {
+#ifdef JS_ENABLE_UWP
+  return;
+#else
   // Get a context for the specified thread.
   CONTEXT context_buf;
   CONTEXT* context;
@@ -366,6 +371,7 @@ static void WalkStackMain64(struct WalkStackData* aData) {
     }
 #  endif
   }
+#endif
 }
 
 /**
@@ -459,7 +465,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
                                         ULONG aModuleSize, PVOID aUserContext) {
   BOOL retval = TRUE;
   DWORD64 addr = *(DWORD64*)aUserContext;
-
+#ifndef JS_ENABLE_UWP
   /*
    * You'll want to control this if we are running on an
    *  architecture where the addresses go the other direction.
@@ -479,7 +485,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
       PrintError("SymLoadModule64");
     }
   }
-
+#endif
   return retval;
 }
 
@@ -511,6 +517,7 @@ static BOOL CALLBACK callbackEspecial64(PCSTR aModuleName, DWORD64 aModuleBase,
 #    define NS_IMAGEHLP_MODULE64_SIZE sizeof(IMAGEHLP_MODULE64)
 #  endif
 
+#ifndef JS_ENABLE_UWP
 BOOL SymGetModuleInfoEspecial64(HANDLE aProcess, DWORD64 aAddr,
                                 PIMAGEHLP_MODULE64 aModuleInfo,
                                 PIMAGEHLP_LINE64 aLineInfo) {
@@ -567,22 +574,24 @@ BOOL SymGetModuleInfoEspecial64(HANDLE aProcess, DWORD64 aAddr,
 
   return retval;
 }
+#endif
 
 static bool EnsureSymInitialized() {
   static bool gInitialized = false;
-  bool retStat;
+  bool retStat = true;
 
   if (gInitialized) {
     return gInitialized;
   }
 
   InitializeDbgHelpCriticalSection();
-
+#ifndef JS_ENABLE_UWP
   SymSetOptions(SYMOPT_LOAD_LINES | SYMOPT_UNDNAME);
   retStat = SymInitialize(GetCurrentProcess(), nullptr, TRUE);
   if (!retStat) {
     PrintError("SymInitialize");
   }
+#endif
 
   gInitialized = retStat;
   /* XXX At some point we need to arrange to call SymCleanup */
@@ -590,6 +599,7 @@ static bool EnsureSymInitialized() {
   return retStat;
 }
 
+#ifndef JS_ENABLE_UWP
 MFBT_API bool MozDescribeCodeAddress(void* aPC,
                                      MozCodeAddressDetails* aDetails) {
   aDetails->library[0] = '\0';
@@ -653,6 +663,7 @@ MFBT_API bool MozDescribeCodeAddress(void* aPC,
   LeaveCriticalSection(&gDbgHelpCS);  // release our lock
   return true;
 }
+#endif
 
 // i386 or PPC Linux stackwalking code
 #elif HAVE_DLADDR &&                                           \
diff --git a/mozglue/misc/TimeStamp_windows.cpp b/mozglue/misc/TimeStamp_windows.cpp
index ae617e7802c4..b573962f8e6c 100644
--- a/mozglue/misc/TimeStamp_windows.cpp
+++ b/mozglue/misc/TimeStamp_windows.cpp
@@ -171,8 +171,10 @@ static inline ULONGLONG PerformanceCounter() {
 static void InitThresholds() {
   DWORD timeAdjustment = 0, timeIncrement = 0;
   BOOL timeAdjustmentDisabled;
+#ifndef JS_ENABLE_UWP
   GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                           &timeAdjustmentDisabled);
+#endif
 
   LOG(("TimeStamp: timeIncrement=%d [100ns]", timeIncrement));
 
diff --git a/mozglue/misc/WindowsMapRemoteView.cpp b/mozglue/misc/WindowsMapRemoteView.cpp
index 4cd60ba7f1e0..7f39e7859377 100644
--- a/mozglue/misc/WindowsMapRemoteView.cpp
+++ b/mozglue/misc/WindowsMapRemoteView.cpp
@@ -29,6 +29,7 @@ WINBASEAPI BOOL WINAPI UnmapViewOfFile2(HANDLE aProcess, PVOID aBaseAddress,
 
 enum SECTION_INHERIT { ViewShare = 1, ViewUnmap = 2 };
 
+#ifndef JS_ENABLE_UWP
 NTSTATUS NTAPI NtMapViewOfSection(
     HANDLE aSection, HANDLE aProcess, PVOID* aBaseAddress, ULONG_PTR aZeroBits,
     SIZE_T aCommitSize, PLARGE_INTEGER aSectionOffset, PSIZE_T aViewSize,
@@ -49,6 +50,7 @@ static DWORD GetWin32ErrorCode(NTSTATUS aNtStatus) {
 
   return pRtlNtStatusToDosError(aNtStatus);
 }
+#endif
 
 namespace mozilla {
 
@@ -56,6 +58,9 @@ MFBT_API void* MapRemoteViewOfFile(HANDLE aFileMapping, HANDLE aProcess,
                                    ULONG64 aOffset, PVOID aBaseAddress,
                                    SIZE_T aViewSize, ULONG aAllocationType,
                                    ULONG aProtectionFlags) {
+#ifdef JS_ENABLE_UWP
+  return false;
+#else
   static const StaticDynamicallyLinkedFunctionPtr<decltype(&MapViewOfFileNuma2)>
       pMapViewOfFileNuma2(L"Api-ms-win-core-memory-l1-1-5.dll",
                           "MapViewOfFileNuma2");
@@ -97,9 +102,13 @@ MFBT_API void* MapRemoteViewOfFile(HANDLE aFileMapping, HANDLE aProcess,
 
   ::SetLastError(GetWin32ErrorCode(ntStatus));
   return nullptr;
+#endif
 }
 
 MFBT_API bool UnmapRemoteViewOfFile(HANDLE aProcess, PVOID aBaseAddress) {
+#ifdef JS_ENABLE_UWP
+  return false;
+#else
   static const StaticDynamicallyLinkedFunctionPtr<decltype(&UnmapViewOfFile2)>
       pUnmapViewOfFile2(L"kernel32.dll", "UnmapViewOfFile2");
 
@@ -119,6 +128,7 @@ MFBT_API bool UnmapRemoteViewOfFile(HANDLE aProcess, PVOID aBaseAddress) {
   NTSTATUS ntStatus = pNtUnmapViewOfSection(aProcess, aBaseAddress);
   ::SetLastError(GetWin32ErrorCode(ntStatus));
   return NT_SUCCESS(ntStatus);
+#endif
 }
 
 }  // namespace mozilla
diff --git a/mozglue/misc/WindowsUnicode.cpp b/mozglue/misc/WindowsUnicode.cpp
index 464380b6dad7..ee5a9bdd18d9 100644
--- a/mozglue/misc/WindowsUnicode.cpp
+++ b/mozglue/misc/WindowsUnicode.cpp
@@ -7,8 +7,10 @@
 #include "WindowsUnicode.h"
 
 #include <windows.h>
+#ifndef JS_ENABLE_UWP
 // For UNICODE_STRING
 #include <winternl.h>
+#endif
 
 #include <string.h>
 
@@ -47,6 +49,7 @@ mozilla::UniquePtr<char[]> WideToUTF8(const std::wstring& aStr) {
   return WideToUTF8(aStr.data(), aStr.length());
 }
 
+#ifndef JS_ENABLE_UWP
 mozilla::UniquePtr<char[]> WideToUTF8(PCUNICODE_STRING aStr) {
   if (!aStr) {
     return nullptr;
@@ -54,6 +57,7 @@ mozilla::UniquePtr<char[]> WideToUTF8(PCUNICODE_STRING aStr) {
 
   return WideToUTF8(aStr->Buffer, aStr->Length / sizeof(WCHAR));
 }
+#endif
 
 }  // namespace glue
 }  // namespace mozilla
diff --git a/mozglue/misc/WindowsUnicode.h b/mozglue/misc/WindowsUnicode.h
index 77fc376b9208..dcf7938393e0 100644
--- a/mozglue/misc/WindowsUnicode.h
+++ b/mozglue/misc/WindowsUnicode.h
@@ -11,7 +11,9 @@
 
 #include <string>
 
+#ifndef JS_ENABLE_UWP
 struct _UNICODE_STRING;
+#endif
 
 namespace mozilla {
 namespace glue {
@@ -21,7 +23,9 @@ mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr,
 
 mozilla::UniquePtr<char[]> WideToUTF8(const wchar_t* aStr);
 mozilla::UniquePtr<char[]> WideToUTF8(const std::wstring& aStr);
+#ifndef JS_ENABLE_UWP
 mozilla::UniquePtr<char[]> WideToUTF8(const _UNICODE_STRING* aStr);
+#endif
 
 #if defined(bstr_t)
 inline mozilla::UniquePtr<char[]> WideToUTF8(const _bstr_t& aStr) {
